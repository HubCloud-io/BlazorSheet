@using HubCloud.BlazorSheet.Core.Enums
@using HubCloud.BlazorSheet.Components
@using BBComponents.Components
@using BBComponents.Enums

<div style="overflow-y: auto; overflow-x: auto; max-height: @MaxHeight; max-width:@MaxWidth">

    <table class="hc-sheet"
           tabindex="0"
           style="width:100%"
           @onkeydown="(e => OnTableKeyDown(e))"
           @onkeyup="(e => OnTableKeyUp(e))">

        @*Sheet rows*@
        <tr>

            <td class="hc-grid-cell" style="width: 30px; top: 0; left: 0; position: sticky; z-index: 20;"></td>

            @foreach (var column in Sheet.Columns)
            {
                <td class="hc-grid-cell text-center"
                    @onclick="(e => OnColumnNumberCellClick(column))"
                    @oncontextmenu="(e => OnColumnContextMenu(e, column))"
                    @oncontextmenu:preventDefault
                    style="@HeaderCellStyle(Sheet, column)"
                    hidden="@CellHidden(column)">
                    @Sheet.ColumnNumber(column)
                </td>
            }

        </tr>

        @*Sheet body*@
        @foreach (var row in Sheet.Rows)
        {
            <tr>
                <td class="hc-grid-cell"
                    style="@LeftSideCellStyle(Sheet, row)"
                    @onclick="(e => OnRowNumberCellClick(row))"
                    @oncontextmenu="(e => OnRowContextMenu(e, row))"
                    @oncontextmenu:preventDefault
                    hidden="@CellHidden(row)">
                    <span>@(Sheet.RowNumber(row))</span>
                </td>
                @foreach (var column in Sheet.Columns)
                {
                    var cell = Sheet.GetCell(row, column);
                    if (cell == null)
                    {
                        continue;
                    }

                    @if (Regime == SheetRegimes.Edit)
                    {
                        <td class="@CellClass(cell)"
                            contenteditable="@(!cell.HasLink)"
                            style="@CellStyle(Sheet, row, column, cell)"
                            @oninput="(e => OnInput(e, cell))"
                            @onclick="(e => OnCellClick(e, row, column, cell))"
                            @onfocusout="(e => OnCellFocusOut(e, cell))" 
                            hidden="@CellHidden(column, row)">
                            
                            @if (cell.EditSettingsUid.HasValue)
                            {
                                 var editSettings = Sheet.GetEditSettings(cell);
                                if (editSettings.ControlKind == CellControlKinds.NumberInput)
                                {
                                    <BbNumberInput TValue="decimal"
                                                   HtmlStyle="width:100%; text-align:right;"
                                                   Digits="@editSettings.NumberDigits"
                                                   @bind-Value="@cell.DecimalValue"
                                                   Changed="(e => OnCellValueChanged(cell))">
                                    </BbNumberInput>
                                }
                                else if (editSettings.ControlKind == CellControlKinds.TextInput)
                                {
                                    <BbTextInput HtmlStyle="width:100%" 
                                                 @bind-Value="@cell.StringValue" 
                                                 Changed="(e => OnCellValueChanged(cell))">
                                        
                                    </BbTextInput>
                                }
                                else if (editSettings.ControlKind == CellControlKinds.DateInput)
                                {
                                    <BbDatePicker @bind-Value="@cell.DateTimeValue"
                                                  DropdownPosition="DropdownPositions.Fixed"
                                                  Size="BootstrapElementSizes.Sm"
                                                  Changed="(e => OnCellValueChanged(cell))">
                                    </BbDatePicker>
                                }
                                else if (editSettings.ControlKind == CellControlKinds.DateTimeInput)
                                {
                                    <BbDatePicker @bind-Value="@cell.DateTimeValue"
                                                  DropdownPosition="DropdownPositions.Fixed"
                                                  Size="BootstrapElementSizes.Sm"
                                                  Changed="(e => OnCellValueChanged(cell))">
                                    </BbDatePicker>
                                }
                                else if (editSettings.ControlKind == CellControlKinds.CheckBox)
                                {
                                    <BbCheckBox @bind-Value="@cell.BoolValue" 
                                                Changed="(e => OnCellValueChanged(cell))"></BbCheckBox>
                                }
                                else if (editSettings.ControlKind == CellControlKinds.ComboBox)
                                {
                                    <BbComboBox TValue="int"
                                                DataProvider="@_fakeComboBoxDataProvider"
                                                DropdownPosition="DropdownPositions.Fixed"
                                                DropdownWidth="@((int)column.WidthValue)"
                                                DataRegime="ComboBoxDataRegimes.Server"
                                                Size="BootstrapElementSizes.Sm"
                                                ValueName="Value"
                                                TextName="Text"
                                                @bind-Value="@cell.IntValue" 
                                                Changed="(e => OnCellValueChanged(cell))"></BbComboBox>
                                }
                                else
                                {
                                    <span style="color:red;">Unknown control</span>
                                }
                            }
                            else
                            {
                                if (cell.HasLink)
                                {
                                    <a href="@cell.Link" target="_blank">@cell.StringValue</a>
                                }
                                else
                                {
                                    @cell.Text
                                }
                            }
                           
                        </td>
                    }
                    else
                    {
                        <td class="@CellClass(cell)" 
                            style="@CellStyle(Sheet, row, column, cell)"
                            hidden="@CellHidden(column, row)">
                            @if (cell.EditSettingsUid.HasValue)
                            {
                                var editSettings = Sheet.GetEditSettings(cell);
                                if (editSettings.ControlKind == CellControlKinds.NumberInput)
                                {
                                    <BbNumberInput TValue="decimal"
                                                   HtmlStyle="width:100%; text-align:right;"
                                                   Digits="@editSettings.NumberDigits"
                                                   @bind-Value="@cell.DecimalValue"
                                                   Changed="(e => OnCellValueChanged(cell))">
                                    </BbNumberInput>
                                }
                                else if (editSettings.ControlKind == CellControlKinds.TextInput)
                                {
                                    <BbTextInput HtmlStyle="width:100%" 
                                                 @bind-Value="@cell.StringValue" 
                                                 Changed="(e => OnCellValueChanged(cell))">
                                        
                                    </BbTextInput>
                                }
                                else if (editSettings.ControlKind == CellControlKinds.DateInput)
                                {
                                    <BbDatePicker @bind-Value="@cell.DateTimeValue"
                                                  DropdownPosition="DropdownPositions.Fixed"
                                                  Size="BootstrapElementSizes.Sm"
                                                  Changed="(e => OnCellValueChanged(cell))">
                                    </BbDatePicker>
                                }
                                else if (editSettings.ControlKind == CellControlKinds.DateTimeInput)
                                {
                                    <BbDatePicker @bind-Value="@cell.DateTimeValue"
                                                  DropdownPosition="DropdownPositions.Fixed"
                                                  Size="BootstrapElementSizes.Sm"
                                                  Changed="(e => OnCellValueChanged(cell))">
                                    </BbDatePicker>
                                }
                                else if (editSettings.ControlKind == CellControlKinds.CheckBox)
                                {
                                    <BbCheckBox @bind-Value="@cell.BoolValue" 
                                                Changed="(e => OnCellValueChanged(cell))"></BbCheckBox>
                                }
                                else if (editSettings.ControlKind == CellControlKinds.ComboBox)
                                {
                                    @if (ComboBoxDataProviderFactory != null)
                                    {
                                        <BbComboBox TValue="int"
                                                    DataProvider="@ComboBoxDataProviderFactory.Create(editSettings.ItemsSource)"
                                                    DropdownPosition="DropdownPositions.Fixed"
                                                    DropdownWidth="@((int)column.WidthValue)"
                                                    DataRegime="ComboBoxDataRegimes.Server"
                                                    Size="BootstrapElementSizes.Sm"
                                                    ValueName="Value"
                                                    TextName="Text"
                                                    @bind-Value="@cell.IntValue" 
                                                    Changed="(e => OnCellValueChanged(cell))"></BbComboBox>
                                    }
                                    
                                }
                                else
                                {
                                    <span style="color:red;">Unknown control</span>
                                }
                            }
                            else
                            {
                                if (cell.HasLink)
                                {
                                    <a href="@cell.Link" target="_blank">@cell.StringValue</a>
                                }
                                else
                                {
                                    @cell.Text
                                }
                            }

                        </td>
                    }
                }
            </tr>
        }

    </table>

</div>

@if (_isColumnContextMenuOpen)
{
    <BbContextMenu ClientX="@_clientX"
                   ClientY="@_clientY"
                   Items="@_columnMenuItems"
                   Closed="OnColumnMenuClosed">
    </BbContextMenu>
}

@if (_isColumnWidthModalOpen)
{
    <ValueInputModal ClientX="@_clientX"
                     ClientY="@_clientY"
                     Width="150"
                     Value="@_currentColumn.WidthValue"
                     Closed="OnColumnWidthValueModalClosed"
                     Title="Column width">
    </ValueInputModal>
}

@if (_isRowContextMenuOpen)
{
    <BbContextMenu ClientX="@_clientX"
                   ClientY="@_clientY"
                   Items="@_rowMenuItems"
                   Closed="OnRowMenuClosed">
    </BbContextMenu>
}

@if (_isRowHeightModalOpen)
{
    <ValueInputModal ClientX="@_clientX"
                     ClientY="@_clientY"
                     Width="150"
                     Value="@_currentRow.HeightValue"
                     Closed="OnRowHeightValueModalClosed"
                     Title="Row height">
    </ValueInputModal>
}

@if (_isSheetSizeModalOpen)
{
    <SheetSizeInputModal ClientX="@_clientX"
                         ClientY="@_clientY"
                         Width="150"
                         Closed="OnSheetSizeModalClosed"
                         Columns="@Sheet.Columns.Count"
                         Rows="@Sheet.Rows.Count"/>
}