@using HubCloud.BlazorSheet.Core.Enums
@using HubCloud.BlazorSheet.Components
@using HubCloud.BlazorSheet.Core.Models
@using HubCloud.BlazorSheet.Editors
@using BBComponents.Components
@using BBComponents.Enums
@using Microsoft.AspNetCore.Components.Web.Virtualization

<div style="overflow-y: auto; overflow-x: auto; max-height: @MaxHeight; max-width:@MaxWidth">

    <table class="hc-sheet"
           tabindex="0"
           @onkeydown="(e => OnTableKeyDown(e))"
           @onkeyup="(e => OnTableKeyUp(e))">

        @*Sheet rows*@
        <tr>
            <td class="hc-grid-cell" style="@TopLeftEmptyCellStyle()"></td>

            @foreach (var column in Sheet.Columns)
            {
                @if (ShouldColumnBeDisplayed(column))
                {
                    <td class="hc-grid-cell text-center"
                        @onclick="(e => OnColumnNumberCellClick(column))"
                        @oncontextmenu="(e => OnColumnContextMenu(e, column))"
                        @oncontextmenu:preventDefault
                        style="@TopSideCellStyle(Sheet, column)">
                        <span>@(Sheet.ColumnNumber(column))</span>

                        @if (column.IsGroup)
                        {
                            @if (column.IsOpen)
                            {
                                <span class="fa fa-solid fa-chevron-right text-primary"
                                      style="cursor:pointer;margin-left:5px;"
                                      @onclick="(e => ColumnGroupOpenCloseClick(column))">
                                </span>
                            }
                            else
                            {
                                <span class="fa fa-solid fa-chevron-down text-primary"
                                      style="cursor:pointer;margin-left:5px;"
                                      @onclick="(e => ColumnGroupOpenCloseClick(column))">
                                </span>
                            }
                        }
                        @if (column.IsAddRemoveAllowed)
                        {
                            <span>&nbsp;</span>
                            <span class="fa fa-plus text-success"></span>
                        }
                    </td>
                }
            }

        </tr>

        @*Sheet body*@

        @if (Sheet.FreezedRows > 0)
        {
            foreach (var row in Sheet.Rows.Take(Sheet.FreezedRows))
            {
                @if (ShouldRowBeDisplayed(row))
                {
                    <tr @key="@row.Uid">
                        <td class="hc-grid-cell"
                            style="@LeftSideCellStyle(Sheet, row)"
                            @oncontextmenu="(e => OnRowContextMenu(e, row))"
                            @oncontextmenu:preventDefault>
                            <span>@(Sheet.RowNumber(row))</span>

                            @if (row.IsGroup)
                            {
                                @if (row.IsOpen)
                                {
                                    <span class="fa fa-solid fa-chevron-down text-primary"
                                          style="cursor:pointer;margin-left:5px;"
                                          @onclick="(e => RowGroupOpenCloseClick(row))">
                                    </span>
                                }
                                else
                                {
                                    <span class="fa fa-solid fa-chevron-right text-primary"
                                          style="cursor:pointer;margin-left:5px;"
                                          @onclick="(e => RowGroupOpenCloseClick(row))">
                                    </span>
                                }
                            }
                            @if (row.IsAddRemoveAllowed)
                            {
                                <span>&nbsp;</span>
                                <span class="fa fa-plus text-success" style="float:right; margin-top: 3px;"></span>
                            }
                        </td>

                        @foreach (var column in Sheet.Columns)
                        {
                            var cell = Sheet.GetCell(row, column);

                            if (cell == null)
                                continue;

                            if (ShouldCellBeDisplayed(column, row, cell))
                                continue;

                            @if (Regime == SheetRegimes.Design)
                            {
                                <td @key="@cell.Uid"
                                    class="@CellClass(cell)"
                                    contenteditable="@(!cell.HasLink)"
                                    style="@CellStyle(row, column, cell)"
                                    colspan="@cell.Colspan"
                                    rowspan="@cell.Rowspan"
                                    @oninput="(e => OnInput(e, cell))"
                                    @onclick="(e => OnCellClick(e, row, column, cell))"
                                    @onfocusout="(e => OnCellFocusOut(e, cell))">

                                    @if (cell.EditSettingsUid.HasValue)
                                    {
                                        var editSettings = Sheet.GetEditSettings(cell);
                                        <CellEditControl EditSettings="@editSettings"
                                                         Cell="@cell"
                                                         IsDisabled="@IsDisabled"
                                                         ColumnWidth="@((int) column.WidthValue)"
                                                         ComboBoxDataProvider="@_fakeComboBoxDataProvider"
                                                         Changed="(e => OnCellValueChanged(cell))">
                                        </CellEditControl>
                                    }
                                    else
                                    {
                                        if (cell.HasLink)
                                        {
                                            <a href="@cell.Link" target="_blank">@cell.StringValue</a>
                                        }
                                        else
                                        {
                                            if (cell.Indent > 0)
                                            {
                                                <span>@GetHtmlSpacing(cell.Indent)</span>
                                                <span>@cell.Text</span>
                                            }
                                            else
                                            {
                                                @cell.Text
                                            }
                                        }
                                    }

                                </td>
                            }
                            else
                            {
                                <SheetCellComponent Sheet="@Sheet" 
                                                    Row="@row" 
                                                    Column="@column" 
                                                    Cell="@cell" 
                                                    StyleBuilder="@_cellStyleBuilder"
                                                    IsHiddenCellsVisible="@_isHiddenCellsVisible" 
                                                    StartEdit="OnCellStartEdit"></SheetCellComponent>
                            }
                        }
                    </tr>
                }
            }
        }
        <Virtualize Items="@Sheet.Rows.Skip(Sheet.FreezedRows).ToList()"
                    TItem="SheetRow"
                    Context="row"
                    OverscanCount="1"
                    ItemSize="26">
            <ItemContent>

                @if ((!row.IsHidden || _isHiddenCellsVisible) && !row.IsCollapsed)
                {
                    <tr @key="@row.Uid">
                        <td class="hc-grid-cell"
                            style="@LeftSideCellStyle(Sheet, row)"
                            @onclick="(e => OnRowNumberCellClick(row))"
                            @oncontextmenu="(e => OnRowContextMenu(e, row))"
                            @oncontextmenu:preventDefault>
                            <span>@(Sheet.RowNumber(row))</span>

                            @if (row.IsGroup)
                            {
                                @if (row.IsOpen)
                                {
                                    <span class="fa fa-solid fa-chevron-down text-primary"
                                          style="cursor:pointer;margin-left:5px;"
                                          align="center"
                                          @onclick="(e => RowGroupOpenCloseClick(row))">
                                    </span>
                                }
                                else
                                {
                                    <span class="fa fa-solid fa-chevron-right text-primary"
                                          style="cursor:pointer;margin-left:5px;"
                                          @onclick="(e => RowGroupOpenCloseClick(row))">
                                    </span>
                                }
                            }
                            @if (row.IsAddRemoveAllowed)
                            {
                                <span>&nbsp;</span>
                                <span class="fa fa-plus text-success" style="float:right; margin-top: 3px;"></span>
                            }
                        </td>

                        @foreach (var column in Sheet.Columns)
                        {
                            var cell = Sheet.GetCell(row, column);

                            if (cell == null)
                                continue;

                            if (ShouldCellBeDisplayed(column, row, cell))
                                continue;

                            @if (Regime == SheetRegimes.Design)
                            {
                                <td @key="@cell.Uid"
                                    class="@CellClass(cell)"
                                    contenteditable="@(!cell.HasLink)"
                                    style="@CellStyle(row, column, cell)"
                                    colspan="@cell.Colspan"
                                    rowspan="@cell.Rowspan"
                                    @oninput="(e => OnInput(e, cell))"
                                    @onclick="(e => OnCellClick(e, row, column, cell))"
                                    @onfocusout="(e => OnCellFocusOut(e, cell))">

                                    @if (cell.EditSettingsUid.HasValue)
                                    {
                                        var editSettings = Sheet.GetEditSettings(cell);
                                        <CellEditControl EditSettings="@editSettings"
                                                         Cell="@cell"
                                                         IsDisabled="@IsDisabled"
                                                         ColumnWidth="@((int) column.WidthValue)"
                                                         ComboBoxDataProvider="@_fakeComboBoxDataProvider"
                                                         Changed="(e => OnCellValueChanged(cell))">
                                        </CellEditControl>
                                    }
                                    else
                                    {
                                        if (cell.HasLink)
                                        {
                                            <a href="@cell.Link" target="_blank">@cell.StringValue</a>
                                        }
                                        else
                                        {
                                            if (cell.Indent > 0)
                                            {
                                                <span>@GetHtmlSpacing(cell.Indent)</span>
                                                <span>@cell.Text</span>
                                            }
                                            else
                                            {
                                                @cell.Text
                                            }
                                        }
                                    }

                                </td>
                            }
                            else
                            {
                                <SheetCellComponent Sheet="@Sheet" 
                                                    Row="@row" 
                                                    Column="@column" 
                                                    Cell="@cell" 
                                                    StyleBuilder="@_cellStyleBuilder"
                                                    IsHiddenCellsVisible="@_isHiddenCellsVisible" 
                                                    StartEdit="OnCellStartEdit"></SheetCellComponent>
                            }
                        }
                    </tr>
                }

            </ItemContent>
        </Virtualize>

    </table>

</div>

@if (_isColumnContextMenuOpen)
{
    <BbContextMenu ClientX="@_clientX"
                   ClientY="@_clientY"
                   Items="@_columnMenuItems"
                   Closed="OnColumnMenuClosed">
    </BbContextMenu>
}

@if (_isColumnWidthModalOpen)
{
    <ValueInputModal ClientX="@_clientX"
                     ClientY="@_clientY"
                     Width="150"
                     Value="@_currentColumn.WidthValue"
                     Closed="OnColumnWidthValueModalClosed"
                     Title="Column width">
    </ValueInputModal>
}

@if (_isRowContextMenuOpen)
{
    <BbContextMenu ClientX="@_clientX"
                   ClientY="@_clientY"
                   Items="@_rowMenuItems"
                   Closed="OnRowMenuClosed">
    </BbContextMenu>
}

@if (_isRowHeightModalOpen)
{
    <ValueInputModal ClientX="@_clientX"
                     ClientY="@_clientY"
                     Width="150"
                     Value="@_currentRow.HeightValue"
                     Closed="OnRowHeightValueModalClosed"
                     Title="Row height">
    </ValueInputModal>
}

@if (_isSheetSizeModalOpen)
{
    <SheetSizeInputModal ClientX="@_clientX"
                         ClientY="@_clientY"
                         Width="150"
                         Closed="OnSheetSizeModalClosed"
                         Columns="@Sheet.Columns.Count"
                         Rows="@Sheet.Rows.Count"/>
}

@if (_isCellLinkInputModalOpen)
{
    <CellLinkInputModal Link="@_currentCell.Link"
                        Text="@_currentCell.StringValue"
                        Width="250"
                        ClientX="@_clientX"
                        ClientY="@_clientY"
                        Closed="OnCellLinkInputModalClosed"/>
}

@if (_cellEditInfo != null)
{
    <CellEditor CellEditInfo="@_cellEditInfo" 
                IsDisabled="@IsDisabled" 
                Changed="OnEditorChanged"></CellEditor>
}