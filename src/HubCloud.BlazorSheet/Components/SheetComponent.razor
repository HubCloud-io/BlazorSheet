@using HubCloud.BlazorSheet.Core.Consts
@using HubCloud.BlazorSheet.Core.Enums
@using HubCloud.BlazorSheet.Components
@using HubCloud.BlazorSheet.Core.Models
@using HubCloud.BlazorSheet.Editors
@using BBComponents.Components
@using BBComponents.Enums
@using Microsoft.AspNetCore.Components.Web.Virtualization

<div class="hc-sheet-container" @onscroll="OnScroll" style="overflow-y: auto; overflow-x: auto; max-height: @MaxHeight; max-width:@MaxWidth">

    <table id="@TableId"
           class="hc-sheet"
           tabindex="0"
           @onkeydown="(e => OnTableKeyDown(e))"
           @onkeyup="(e => OnTableKeyUp(e))">

        @*Sheet rows*@
        <tr>
            <td style="@TopLeftChevronPlusEmptyCellStyle(0, 0)"></td>
            <td style="@TopLeftChevronPlusEmptyCellStyle(SheetConsts.ChevronPlusCellWidth, 0)"></td>

            @foreach (var column in Sheet.GetVisibleColumns(_isHiddenCellsVisible))
            {
                <SheetColumnChevronPlusCellComponent Column="column"
                                                     Sheet="Sheet"
                                                     CellStyleBuilder="_cellStyleBuilder"
                                                     IsHiddenCellsVisible="_isSheetSizeModalOpen"
                                                     GroupOpenCloseClick="() => OnColumnGroupOpenCloseClick(column)" />
            }
        </tr>
        <tr>
            <td style="@TopLeftChevronPlusEmptyCellStyle(0, SheetConsts.TopSideCellHeight)"></td>
            <td class="hc-grid-cell" style="@TopLeftEmptyCellStyle(SheetConsts.ChevronPlusCellWidth, SheetConsts.TopSideCellHeight)"></td>

            @foreach (var column in Sheet.GetVisibleColumns(_isHiddenCellsVisible))
            {
                <SheetColumnHeaderCellComponent Column="column"
                                                Sheet="Sheet"
                                                CellStyleBuilder="@_cellStyleBuilder"
                                                IsHiddenCellsVisible="@_isHiddenCellsVisible"
                                                Click="() => OnColumnNumberCellClick(column)"
                                                ColumnContextMenu="(e) => OnColumnContextMenu(e, column)" />
            }

        </tr>

        @*Sheet body*@
        @foreach (var row in Sheet.GetFreezedVisibleRows(_isHiddenCellsVisible))
        {
            <SheetRowComponent @key="@row"
                               Row="row"
                               Sheet="@Sheet"
                               Regime="@Regime"
                               IsHiddenCellsVisible="@_isHiddenCellsVisible"
                               StyleBuilder="@_cellStyleBuilder"
                               CellClicked="OnCellClicked"
                               CellStartEdit="OnCellStartEdit"
                               RowContextMenu="(e) => OnRowContextMenu(e, row)"
                               AddRowAfter="() => OnAddRowAfter(row)"
                               GroupOpenCloseClick="() => OnRowGroupOpenCloseClick(row)" />
        }

        @if (IsVirtualizationEnabled)
        {
            <Virtualize Items="@Sheet.GetVisibleRows(_isHiddenCellsVisible)"
                        TItem="SheetRow"
                        Context="row"
                        OverscanCount="1"
                        ItemSize="26">
                <ItemContent>
                    <SheetRowComponent @key="@row"
                                       Row="row"
                                       Sheet="@Sheet"
                                       Regime="@Regime"
                                       IsHiddenCellsVisible="@_isHiddenCellsVisible"
                                       StyleBuilder="@_cellStyleBuilder"
                                       CellClicked="OnCellClicked"
                                       CellStartEdit="OnCellStartEdit"
                                       RowContextMenu="(e) => OnRowContextMenu(e, row)"
                                       RowHeaderCellClick="() => OnRowNumberCellClick(row)"
                                       AddRowAfter="() => OnAddRowAfter(row)"
                                       GroupOpenCloseClick="() => OnRowGroupOpenCloseClick(row)" />

                </ItemContent>
            </Virtualize>
        }
        else
        {
            foreach (var row in Sheet.GetVisibleRows(_isHiddenCellsVisible))
            {
                <SheetRowComponent @key="@row"
                                   Row="row"
                                   Sheet="@Sheet"
                                   Regime="@Regime"
                                   IsHiddenCellsVisible="@_isHiddenCellsVisible"
                                   StyleBuilder="@_cellStyleBuilder"
                                   CellClicked="OnCellClicked"
                                   CellStartEdit="OnCellStartEdit"
                                   RowContextMenu="(e) => OnRowContextMenu(e, row)"
                                   RowHeaderCellClick="() => OnRowNumberCellClick(row)"
                                   AddRowAfter="() => OnAddRowAfter(row)"
                                   GroupOpenCloseClick="() => OnRowGroupOpenCloseClick(row)" />
            }
        }

    </table>

</div>

@if (_isColumnContextMenuOpen)
{
    <BbContextMenu ClientX="@_clientX"
                   ClientY="@_clientY"
                   Items="@_columnMenuItems"
                   Closed="OnColumnMenuClosed">
    </BbContextMenu>
}

@if (_isColumnWidthModalOpen)
{
    <ValueInputModal ClientX="@_clientX"
                     ClientY="@_clientY"
                     Width="150"
                     Value="@_currentColumn.WidthValue"
                     Closed="OnColumnWidthValueModalClosed"
                     Title="Column width">
    </ValueInputModal>
}

@if (_isRowContextMenuOpen)
{
    <BbContextMenu ClientX="@_clientX"
                   ClientY="@_clientY"
                   Items="@_rowMenuItems"
                   Closed="OnRowMenuClosed">
    </BbContextMenu>
}

@if (_isRowHeightModalOpen)
{
    <ValueInputModal ClientX="@_clientX"
                     ClientY="@_clientY"
                     Width="150"
                     Value="@_currentRow.HeightValue"
                     Closed="OnRowHeightValueModalClosed"
                     Title="Row height">
    </ValueInputModal>
}

@if (_isSheetSizeModalOpen)
{
    <SheetSizeInputModal ClientX="@_clientX"
                         ClientY="@_clientY"
                         Width="150"
                         Closed="OnSheetSizeModalClosed"
                         Columns="@Sheet.Columns.Count"
                         Rows="@Sheet.Rows.Count" />
}

@if (_isCellLinkInputModalOpen)
{
    <CellLinkInputModal Link="@_currentCell.Link"
                        Text="@_currentCell.StringValue"
                        Width="250"
                        ClientX="@_clientX"
                        ClientY="@_clientY"
                        Closed="OnCellLinkInputModalClosed" />
}

@if (_cellEditInfo != null)
{
    <CellEditor CellEditInfo="@_cellEditInfo"
                IsDisabled="@IsDisabled"
                EditCancelled="OnCellEditCancelled"
                Changed="OnEditorChanged"></CellEditor>
}

@* @if (_currentCell != null && _cellEditInfo == null) *@
@* { *@
@*     <CellSelection Cell="@_currentCell"></CellSelection> *@
@* } *@