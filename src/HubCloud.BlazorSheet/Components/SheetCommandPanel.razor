@using BBComponents.Components
@using HubCloud.BlazorSheet.Core.Enums

<div class="hc-sheet-command-panel">
    <div class="row" style="line-height: 15px; font-size: 12px;">

        <div class="col-sm-12">

            <span class="fa fa-light fa-snowflake text-primary"></span>
            <span class="text-primary">R</span>
            <BbNumberInput TValue="int"
                           @bind-Value="@Model.FreezedRows"
                           Changed="OnFreezedRowsChanged"
                           HtmlStyle="width:30px;margin-left:5px; text-align:right;">
            </BbNumberInput>
            <span class="text-primary">С</span>
            <BbNumberInput TValue="int"
                           @bind-Value="@Model.FreezedColumns"
                           Changed="OnFreezedColumnsChanged"
                           HtmlStyle="width:30px;margin-left:5px; text-align:right;">
            </BbNumberInput>

            <span class="fa fa-font text-primary" style="margin-left: 3px;"></span>
            <BbNumberInput TValue="int"
                           @bind-Value="@Model.FontSize"
                           Changed="OnSettingsChanged"
                           HtmlStyle="width:30px;margin-left:5px; text-align:right;">
            </BbNumberInput>

            <span class="fa fa-align-left text-primary" style="margin-left: 3px;"></span>
            <BbSelect TValue="string"
                      ItemsSource="@_textAlignSource"
                      TextName="Item1"
                      ValueName="Item2"
                      @bind-Value="@Model.TextAlign"
                      HtmlStyle="width:70px;margin-left:5px;height:25px;"
                      Changed="OnSettingsChanged">
            </BbSelect>

            <button class="@ToggleButtonStyle(Model.IsBold)"
                    @onclick="OnBoldClick"
                    style="padding-top:2px; padding-bottom: 2px; margin-top: -5px;">
                <span>B</span>
            </button>

            <button class="@ToggleButtonStyle(Model.IsItalic)"
                    @onclick="OnItalicClick"
                    style="padding-top: 2px; padding-bottom: 2px; margin-top: -5px;">
                <span style="font-style: italic;">I</span>
            </button>

            <span class="fa fa-font text-primary" style="margin-left: 3px;"></span>
            @* <BbTextInput @bind-Value="@StyleModel.Color" Changed="OnSettingsChanged" HtmlStyle="width:70px;"></BbTextInput> *@
            <input type="color"
                   @onchange="(e => OnColorChange(e))"
                   value="@Model.Color"
                   style="width:30px; height: 25px;" />

            <span class="fa fa-tint text-primary" style="margin-left: 3px;"></span>
            @* <BbTextInput @bind-Value="@StyleModel.BackgroundColor" Changed="OnSettingsChanged" HtmlStyle="width:70px;"></BbTextInput> *@
            <input type="color"
                   @onchange="(e => OnBackgroundColorChange(e))"
                   value="@Model.BackgroundColor"
                   style="width:30px; height: 25px;" />

            <span class="fa fa-border text-primary" style="margin-left: 3px;"></span>
            <BbSelect TValue="CellBorderTypes"
                      ItemsSource="@_borderTypesSource"
                      ValueName="Item1"
                      TextName="Item2"
                      HtmlStyle="height:25px;"
                      @bind-Value="@Model.BorderType"
                      Changed="OnSettingsChanged">
            </BbSelect>

            <BbNumberInput TValue="int"
                           @bind-Value="@Model.BorderWidth"
                           Changed="OnSettingsChanged"
                           HtmlStyle="width:30px;margin-left:5px; text-align:right;">
            </BbNumberInput>

            <input type="color"
                   @onchange="(e => OnBorderColorChange(e))"
                   value="@Model.BorderColor"
                   style="width:30px; height: 25px;" />

            <BbSelect TValue="CellFormatTypes"
                      ItemsSource="@_cellFormatSource"
                      TextName="Item1"
                      ValueName="Item2"
                      HtmlStyle="width:150px;margin-left:5px;margin-right:5px;height:25px;"
                      @bind-Value="@Model.FormatType"
                      Changed="OnFormatChanged">
            </BbSelect>

            @if (Model.FormatType == CellFormatTypes.Custom)
            {
                <BbTextInput @bind-Value="@Model.CustomFormat" Changed="OnCustomFormatInputChanged" HtmlStyle="width:150px;margin-right:5px;height:25px;" />
            }

            <button class="btn btn-outline-primary btn-sm" @onclick="(e => OnEditSettingsClick(e))">
                <span class="fa fa-edit"></span>
                <span>Edit settings</span>
            </button>

            <button title="Excel export" class="btn btn-outline-success btn-sm" @onclick="OnExport">
                <span class="fa fa-file-export"></span>
            </button>
            <button title="Excel import" class="btn btn-outline-success btn-sm" @onclick="OnImport">
                <span class="fa fa-file-import"></span>
            </button>

            <button class="btn btn-outline-primary btn-sm" @onclick="OnOpenCellLinkModal">
                <span class="fa fa-solid fa-link"></span>
            </button>

            <div class="btn-group btn-group-sm float-left">
                <button type="button" class="btn btn-sm btn-outline-primary dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Actions
                </button>
                <div class="dropdown-menu" aria-labelledby="dropdownMenuButton">
                    <button class="dropdown-item"
                            type="button"
                            disabled="@IsButtonSplitJoinDisabled()"
                            @onclick="OnSplitJoinCells">
                        @if (SelectedCellsCount > 1)
                        {
                            <span>Join</span>
                        }
                        else
                        {
                            <span>Split</span>
                        }
                    </button>
                    <button class="dropdown-item"
                            type="button"
                            disabled="@(!CanRowsBeGrouped)"
                            @onclick="OnGroupRows">
                        Group rows
                    </button>
                    <button class="dropdown-item"
                            type="button"
                            disabled="@(!CanRowsBeUngrouped)"
                            @onclick="OnUngroupRows">
                        Ungroup rows
                    </button>
                    <button class="dropdown-item"
                            type="button"
                            @onclick="OnUngroupAllRows">
                        Ungroup all rows
                    </button>
                    <button class="dropdown-item"
                            type="button"
                            @onclick="OnCollapseExpandAllRows">
                        Collapse/Expand all rows
                    </button>

                    <button class="dropdown-item"
                            type="button"
                            disabled="@(!CanColumnsBeGrouped)"
                            @onclick="OnGroupColumns">
                        Group columns
                    </button>
                    <button class="dropdown-item"
                            type="button"
                            disabled="@(!CanColumnsBeUngrouped)"
                            @onclick="OnUngroupColumns">
                        Ungroup columns
                    </button>
                    <button class="dropdown-item"
                            type="button"
                            @onclick="OnUngroupAllColumns">
                        Ungroup all columns
                    </button>
                    <button class="dropdown-item"
                            type="button"
                            @onclick="OnCollapseExpandAllColumns">
                        Collapse/Expand all columns
                    </button>

                    <button class="dropdown-item"
                            type="button"
                            disabled="@(SelectedCellsCount != 1)"
                            @onclick="async () => await RememberCellSettings.InvokeAsync()">
                        Remember cell settings
                    </button>
                    <button class="dropdown-item"
                            type="button"
                            disabled="@(SelectedCellsCount == 0)"
                            @onclick="async () => await ApplyRememberedCellSettings.InvokeAsync()">
                        Apply remembered cell settings
                    </button>
                </div>
            </div>
        </div>
    </div>

    <div class="row" style="margin-top:5px;">

        <div class="col-sm-1">
            <span class="text-primary" style="line-height: 30px;">
                @(string.IsNullOrWhiteSpace(Model.SelectedCellAddress) ? "RC" : @Model.SelectedCellAddress)
            </span>
        </div>
        <div class="col-sm-11">
            <BbTextInput HtmlStyle="width:100%"
                         @bind-Value="@Model.InputText"
                         Placeholder="Formula"
                         Changed="OnFormulaChanged">
            </BbTextInput>
        </div>

    </div>
</div>

@if (_isEditSettingsOpen)
{
    <EditParametersModal ClientX="@_clientX"
                         ClientY="@_clientY"
                         EditSettings="@Model.EditSettings"
                         DataTypeDataProvider="@DataTypeDataProvider"
                         Closed="OnEditParametersClosed"></EditParametersModal>
}